plugins {
    id 'org.springframework.boot' version '2.6.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'eclipse'
}

group = 'de.hanselmann'
sourceCompatibility = '11'

if (project.hasProperty('backendVersion')) {
  version = project.backendVersion
} else {
  version = '1.1.0'
}

repositories {
    mavenCentral()
}

springBoot {    
    buildInfo() 
}

bootJar {
	classpath 'public'
	archiveFileName = "kaufhansel_backend.jar"
}

// bootBuildInfo generates the META-INF/build-info.properties from which the BuildInfo bean
// is created. However; bootBuildInfo generates it in build/resources/main/ which is not on
// the classpath when the application is executed in eclipse.
// Therefore we have to convince eclipse to generate and copy that file whenever the version info
// changes:

// This task copies the output of bootBuildInfo (the build-info.properties file) into
// the build directory of eclipse which is always on the classpath when the application is started
// with eclipse.
task copyBuildPropertiesForEclipse(type: Copy) {
    from bootBuildInfo
    into 'bin/main/META-INF/'
}

// Tell eclipse to execute the copy task whenever something in the workspace changes.
// Since copyBuildPropertiesForEclipse depends on bootBuildInfo,
// bootBuildInfo will be executed before copyBuildPropertiesForEclipse (thats why we wrote
// "from bootBuildInfo" instead of "from 'build/resources/main/META-INF/build-info.properties')
eclipse {
    autoBuildTasks copyBuildPropertiesForEclipse
}

def springBootVersion = '2.5.2'
def jsonWebTokenVersion = '0.11.2'

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation 'org.liquibase:liquibase-core:4.4.0'
    implementation 'org.xerial:sqlite-jdbc:3.36.0'
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation 'com.aventrix.jnanoid:jnanoid:2.0.0'
    implementation "io.jsonwebtoken:jjwt-api:${jsonWebTokenVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jsonWebTokenVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jsonWebTokenVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-webflux:${springBootVersion}"
    testImplementation "org.assertj:assertj-core:3.20.2"
}

test {
    useJUnitPlatform()
}
